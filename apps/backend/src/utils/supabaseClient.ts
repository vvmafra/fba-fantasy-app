import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env['SUPABASE_URL'];
const supabaseAnonKey = process.env['SUPABASE_ANON_KEY'];
const supabaseServiceRoleKey = process.env['SUPABASE_SERVICE_ROLE_KEY'];

if (!supabaseUrl || !supabaseAnonKey) {
  console.warn('‚ö†Ô∏è  Supabase URL e Anon Key n√£o encontrados. Verifique suas vari√°veis de ambiente.');
  console.warn('üìù Copie o arquivo env.example para .env e configure suas credenciais do Supabase.');
}

// Cliente para opera√ß√µes p√∫blicas (an√¥nimas)
export const supabase = supabaseUrl && supabaseAnonKey 
  ? createClient(supabaseUrl, supabaseAnonKey)
  : null;

// Cliente para opera√ß√µes administrativas (com service role)
export const supabaseAdmin = supabaseUrl && supabaseServiceRoleKey 
  ? createClient(supabaseUrl, supabaseServiceRoleKey)
  : null;

// Fun√ß√£o helper para verificar se o Supabase est√° conectado
export const checkSupabaseConnection = async () => {
  try {
    if (!supabase) {
      console.error('‚ùå Cliente Supabase n√£o inicializado');
      return false;
    }
    const { data, error } = await supabase.from('players').select('count').limit(1);
    if (error) throw error;
    return true;
  } catch (error) {
    console.error('Erro na conex√£o com Supabase:', error);
    return false;
  }
};

// Fun√ß√£o helper para tratamento de erros do Supabase
export const handleSupabaseError = (error: any) => {
  if (error.code === 'PGRST116') {
    return { message: 'Registro n√£o encontrado', statusCode: 404 };
  }
  if (error.code === '23505') {
    return { message: 'Registro j√° existe', statusCode: 409 };
  }
  if (error.code === '23503') {
    return { message: 'Viola√ß√£o de chave estrangeira', statusCode: 400 };
  }
  return { message: 'Erro interno do servidor', statusCode: 500 };
}; 